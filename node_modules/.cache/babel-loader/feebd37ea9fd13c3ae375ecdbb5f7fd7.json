{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { reqSingerList } from \"@/api\";\nexport default {\n  name: \"Main\",\n\n  data() {\n    return {\n      artists: [],\n      singerCheck: {\n        type: \"-1\",\n        area: \"-1\",\n        offset: 0,\n        more: true\n      }\n    };\n  },\n\n  mounted() {\n    this.getSingerList();\n  },\n\n  methods: {\n    // 处理歌手数据的回调\n    async getSingerList() {\n      let result = await reqSingerList(this.singerCheck);\n\n      if (result.code === 200) {\n        this.artists = result.artists;\n        this.singerCheck.more = result.more;\n      } else {\n        this.$message({\n          type: \"warning\",\n          message: \"歌手列表数据加载错误\"\n        });\n      }\n    },\n\n    // 处理改变歌手和地区，点击要回到第一页的回调\n    handlerAttribute() {\n      this.singerCheck.offset = 0;\n      this.getSingerList();\n    },\n\n    // 处理上一页按钮的回调\n    handlerOlder() {\n      if (this.singerCheck.offset === 0) {\n        this.$message({\n          type: \"warning\",\n          message: \"没有数据了\"\n        });\n      } else {\n        this.singerCheck.offset -= 30;\n        document.documentElement.scrollTop = 0;\n        this.getSingerList();\n      }\n    },\n\n    // 处理下一页按钮的回调\n    hadlerNext() {\n      if (this.singerCheck.more) {\n        this.singerCheck.offset += 30;\n        document.documentElement.scrollTop = 0;\n        this.getSingerList();\n      } else {\n        this.$message({\n          type: \"warning\",\n          message: \"没有数据了\"\n        });\n      }\n    },\n\n    // 跳转歌手主页的回调\n    handlerToDetail(name, img1v1Url, id) {\n      const singerDetail = {\n        name,\n        img1v1Url,\n        id\n      };\n      this.$router.push({\n        path: \"/classify/classifyDetails\",\n        query: singerDetail\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0EA;AACA;EACAA,YADA;;EAEAC;IACA;MACAC,WADA;MAEAC;QACAC,UADA;QAEAC,UAFA;QAGAC,SAHA;QAIAC;MAJA;IAFA;EASA,CAZA;;EAaAC;IACA;EACA,CAfA;;EAgBAC;IACA;IACA;MACA;;MACA;QACA;QACA;MACA,CAHA,MAGA;QACA;UACAL,eADA;UAEAM;QAFA;MAIA;IACA,CAbA;;IAcA;IACAC;MACA;MACA;IACA,CAlBA;;IAmBA;IACAC;MACA;QACA;UACAR,eADA;UAEAM;QAFA;MAIA,CALA,MAKA;QACA;QACAG;QACA;MACA;IACA,CA/BA;;IAgCA;IACAC;MACA;QACA;QACAD;QACA;MACA,CAJA,MAIA;QACA;UACAT,eADA;UAEAM;QAFA;MAIA;IACA,CA5CA;;IA6CA;IACAK;MACA;QAAAf;QAAAgB;QAAAC;MAAA;MACA;QACAC,iCADA;QAEAC;MAFA;IAIA;;EApDA;AAhBA","names":["name","data","artists","singerCheck","type","area","offset","more","mounted","methods","message","handlerAttribute","handlerOlder","document","hadlerNext","handlerToDetail","img1v1Url","id","path","query"],"sourceRoot":"src/views/Classify","sources":["index.vue"],"sourcesContent":["<template>\r\n  <div id=\"main-wapper\">\r\n    <div v-show=\"$route.fullPath === '/classify'\">\r\n      <!-- 标题 -->\r\n      <div class=\"page-header\">\r\n        <h1><i class=\"glyphicon glyphicon-user\"></i>歌手分类</h1>\r\n      </div>\r\n      <!-- 筛选歌手属性 -->\r\n      <div>\r\n        <span style=\"padding-right: 20px\"><strong>歌手分类:</strong> </span>\r\n        <el-radio-group v-model=\"singerCheck.type\" style=\"padding-right: 40px\">\r\n          <el-radio-button @click.native=\"handlerAttribute\" label=\"-1\"\r\n            >全部</el-radio-button\r\n          >\r\n          <el-radio-button @click.native=\"handlerAttribute\" label=\"1\"\r\n            >男歌手</el-radio-button\r\n          >\r\n          <el-radio-button @click.native=\"handlerAttribute\" label=\"2\"\r\n            >女歌手</el-radio-button\r\n          >\r\n          <el-radio-button @click.native=\"handlerAttribute\" label=\"3\"\r\n            >乐队</el-radio-button\r\n          >\r\n        </el-radio-group>\r\n        <span style=\"padding-right: 20px\"><strong>地区:</strong></span>\r\n        <el-radio-group v-model=\"singerCheck.area\">\r\n          <el-radio-button @click.native=\"handlerAttribute\" label=\"-1\"\r\n            >全部</el-radio-button\r\n          >\r\n          <el-radio-button @click.native=\"handlerAttribute\" label=\"7\"\r\n            >华语</el-radio-button\r\n          >\r\n          <el-radio-button @click.native=\"handlerAttribute\" label=\"96\"\r\n            >欧美</el-radio-button\r\n          >\r\n          <el-radio-button @click.native=\"handlerAttribute\" label=\"8\"\r\n            >日本</el-radio-button\r\n          >\r\n          <el-radio-button @click.native=\"handlerAttribute\" label=\"16\"\r\n            >韩国</el-radio-button\r\n          >\r\n          <el-radio-button @click.native=\"handlerAttribute\" label=\"0\"\r\n            >其他</el-radio-button\r\n          >\r\n        </el-radio-group>\r\n      </div>\r\n      <!-- 用于展示歌手列表-->\r\n      <div class=\"row\">\r\n        <div class=\"col-sm-6 col-md-4\" v-for=\"art in artists\" :key=\"art.id\">\r\n          <div class=\"thumbnail\">\r\n            <img\r\n              :src=\"art.img1v1Url\"\r\n              :alt=\"art.name\"\r\n              @click=\"handlerToDetail(art.name, art.img1v1Url, art.id)\"\r\n            />\r\n            <div class=\"caption\">\r\n              <h3>{{ art.name }}</h3>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!-- 页码切换 -->\r\n      <nav>\r\n        <el-button type=\"success\" round @click=\"handlerOlder\">上一页</el-button>\r\n        <el-button type=\"success\" round @click=\"hadlerNext\">下一页</el-button>\r\n      </nav>\r\n    </div>\r\n\r\n    <!--  -->\r\n    <router-view />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { reqSingerList } from \"@/api\";\r\nexport default {\r\n  name: \"Main\",\r\n  data() {\r\n    return {\r\n      artists: [],\r\n      singerCheck: {\r\n        type: \"-1\",\r\n        area: \"-1\",\r\n        offset: 0,\r\n        more: true,\r\n      },\r\n    };\r\n  },\r\n  mounted() {\r\n    this.getSingerList();\r\n  },\r\n  methods: {\r\n    // 处理歌手数据的回调\r\n    async getSingerList() {\r\n      let result = await reqSingerList(this.singerCheck);\r\n      if (result.code === 200) {\r\n        this.artists = result.artists;\r\n        this.singerCheck.more = result.more;\r\n      } else {\r\n        this.$message({\r\n          type: \"warning\",\r\n          message: \"歌手列表数据加载错误\",\r\n        });\r\n      }\r\n    },\r\n    // 处理改变歌手和地区，点击要回到第一页的回调\r\n    handlerAttribute() {\r\n      this.singerCheck.offset = 0;\r\n      this.getSingerList();\r\n    },\r\n    // 处理上一页按钮的回调\r\n    handlerOlder() {\r\n      if (this.singerCheck.offset === 0) {\r\n        this.$message({\r\n          type: \"warning\",\r\n          message: \"没有数据了\",\r\n        });\r\n      } else {\r\n        this.singerCheck.offset -= 30;\r\n        document.documentElement.scrollTop = 0;\r\n        this.getSingerList();\r\n      }\r\n    },\r\n    // 处理下一页按钮的回调\r\n    hadlerNext() {\r\n      if (this.singerCheck.more) {\r\n        this.singerCheck.offset += 30;\r\n        document.documentElement.scrollTop = 0;\r\n        this.getSingerList();\r\n      } else {\r\n        this.$message({\r\n          type: \"warning\",\r\n          message: \"没有数据了\",\r\n        });\r\n      }\r\n    },\r\n    // 跳转歌手主页的回调\r\n    handlerToDetail(name, img1v1Url, id) {\r\n      const singerDetail = { name, img1v1Url, id };\r\n      this.$router.push({\r\n        path: \"/classify/classifyDetails\",\r\n        query: singerDetail,\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n#main-wapper {\r\n  width: 1800px;\r\n  margin: 0 auto;\r\n  padding-top: 20px;\r\n  div.el-pagination {\r\n    padding-bottom: 20px;\r\n  }\r\n  .page-header {\r\n    i {\r\n      padding-right: 10px;\r\n    }\r\n  }\r\n  img {\r\n    width: 875px;\r\n    height: 560px;\r\n  }\r\n  nav {\r\n    display: flex;\r\n    justify-content: space-around;\r\n    padding-bottom: 20px;\r\n  }\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}